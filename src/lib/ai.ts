import OpenAI from 'openai';
import fs from 'fs';
import path from 'path';
import { exec } from 'child_process';
import { promisify } from 'util';

export interface SummarizationOptions {
  style: 'bullet-points' | 'paragraph' | 'key-insights';
  maxLength: number;
  language?: string;
}

export class AIService {
  private openai: OpenAI;

  constructor(apiKey: string) {
    this.openai = new OpenAI({
      apiKey,
    });
  }

  async summarizeTranscript(
    transcript: string,
    options: SummarizationOptions
  ): Promise<string> {
    try {
      const systemPrompt = this.getSystemPrompt(options.style, options.language);
      const userPrompt = this.getUserPrompt(transcript, options);

      const response = await this.openai.chat.completions.create({
        model: 'gpt-5-nano',
        messages: [
          { role: 'system', content: systemPrompt },
          { role: 'user', content: userPrompt },
        ],
        max_completion_tokens: 128000,
        temperature: 1.0, // Default value required by gpt-5-nano
      });

      return response.choices[0]?.message?.content?.trim() || 'Failed to generate summary';
    } catch (error) {
      console.error('OpenAI summarization error:', error);
      throw new Error('Failed to summarize transcript');
    }
  }

  // Removed extractKeyTopics and generateQuestions methods as they are no longer needed

  async downloadYouTubeAudio(youtubeId: string): Promise<string> {
    const tempDir = path.join(process.cwd(), 'temp');
    
    // Create temp directory if it doesn't exist
    if (!fs.existsSync(tempDir)) {
      fs.mkdirSync(tempDir, { recursive: true });
    }

    // Check for existing audio files (any format)
    const existingFiles = fs.readdirSync(tempDir).filter((f: string) => f.startsWith(youtubeId));
    if (existingFiles.length > 0) {
      const existingPath = path.join(tempDir, existingFiles[0]);
      console.log(`üîÑ Using existing audio file: ${existingPath}`);
      return existingPath;
    }

    try {
      const videoUrl = `https://www.youtube.com/watch?v=${youtubeId}`;
      console.log(`üéµ Downloading audio from: ${videoUrl}`);
      
      // Use yt-dlp to download audio in MP3 format
      const execAsync = promisify(exec);
      
      // Download audio in webm format (no conversion needed)
      const command = `yt-dlp -f "bestaudio" -o "${tempDir}/%(id)s.%(ext)s" "${videoUrl}"`;
      console.log(`üõ†Ô∏è Running command: ${command}`);
      
      const { stdout, stderr } = await execAsync(command);
      console.log(`üì§ yt-dlp stdout:`, stdout);
      if (stderr) console.log(`üì§ yt-dlp stderr:`, stderr);
      
      // Find the downloaded audio file
      const downloadedFiles = fs.readdirSync(tempDir).filter((f: string) => f.startsWith(youtubeId));
      if (downloadedFiles.length === 0) {
        throw new Error(`Audio file not created in ${tempDir}`);
      }
      
      const audioPath = path.join(tempDir, downloadedFiles[0]);
      const stats = fs.statSync(audioPath);
      console.log(`‚úÖ Audio downloaded successfully: ${audioPath}. Size: ${stats.size} bytes`);
      
      return audioPath;
    } catch (error) {
      console.error('Audio download error:', error);
      throw new Error('Failed to download audio from YouTube');
    }
  }

  async transcribeWithWhisper(audioPath: string): Promise<string> {
    try {
      const transcription = await this.openai.audio.transcriptions.create({
        file: fs.createReadStream(audioPath),
        model: 'whisper-1',
        response_format: 'text',
      });

      return transcription as string;
    } catch (error) {
      console.error('Whisper transcription error:', error);
      throw new Error('Failed to transcribe audio with Whisper');
    }
  }

  async transcribeYouTubeVideo(youtubeId: string): Promise<string> {
    let audioPath: string | null = null;
    
    try {
      // Download audio from YouTube
      audioPath = await this.downloadYouTubeAudio(youtubeId);
      
      // Transcribe with Whisper
      const transcript = await this.transcribeWithWhisper(audioPath);
      
      return transcript;
    } catch (error) {
      console.error('YouTube transcription error:', error);
      throw error;
    } finally {
      // Cleanup temp file
      if (audioPath && fs.existsSync(audioPath)) {
        try {
          fs.unlinkSync(audioPath);
        } catch (cleanupError) {
          console.error('Cleanup error:', cleanupError);
        }
      }
    }
  }


  private getSystemPrompt(style: SummarizationOptions['style'], language: string = 'pl'): string {
    const baseInstructions = language === 'pl' ? `
      Tworzysz zwiƒôz≈Çe, ale anga≈ºujƒÖce podsumowania film√≥w z YouTube. Pisz jak do≈õwiadczony dziennikarz, kt√≥ry potrafi przekazaƒá g≈Ç√≥wne tre≈õci w przystƒôpny spos√≥b.

      STYL PISANIA:
      1. Pisz naturalnie, jakby≈õ opowiada≈Ç znajomemu o ciekawym filmie
      2. Unikaj sztywnych, powtarzajƒÖcych siƒô zwrot√≥w jak "omawiane jest", "przedstawiane jest", "film opisuje"
      3. Ka≈ºdy akapit zacznij inaczej - u≈ºywaj nazwy tematu, ciekawego faktu, pytania lub bezpo≈õrednio g≈Ç√≥wnej informacji
      4. Preferuj stronƒô czynnƒÖ zamiast biernej ("Autor pokazuje" zamiast "pokazywane jest")
      5. ≈ÅƒÖcz zdania p≈Çynnymi przej≈õciami, unikaj mechanicznego wyliczania

      STRUKTURA:
      1. Zacznij od najbardziej intrygujƒÖcego aspektu z filmu
      2. Przedstaw g≈Ç√≥wne tezy/punkty w logicznej kolejno≈õci
      3. Zako≈Ñcz kluczowymi wnioskami lub praktycznymi informacjami

      PRZYK≈ÅADY DOBRYCH POCZƒÑTK√ìW:
      - "[Nazwa tematu] to..."
      - "G≈Ç√≥wnƒÖ tezƒÖ filmu jest..."
      - "[Konkretny fakt/liczba] pokazuje..."
      - "Wed≈Çug autora..."

      D≈ÅUGO≈öƒÜ: oko≈Ço 500-800 s≈Ç√≥w
      CEL: Sprawiƒá, ≈ºeby czytelnik zrozumia≈Ç o czym by≈Ç film, nawet go nie oglƒÖdajƒÖc.
    ` : `
      You create concise but engaging YouTube video summaries. Write like an experienced journalist who can convey main content in an accessible way.

      WRITING STYLE:
      1. Write naturally, as if telling a friend about an interesting video
      2. Avoid stiff, repetitive phrases like "it is discussed", "it is presented", "the video describes"
      3. Start each paragraph differently - use topic names, interesting facts, questions, or direct main information
      4. Prefer active voice over passive ("The author shows" instead of "it is shown")
      5. Connect sentences with smooth transitions, avoid mechanical listing

      STRUCTURE:
      1. Start with the most intriguing aspect from the video
      2. Present main theses/points in logical order
      3. End with key conclusions or practical information

      EXAMPLES OF GOOD BEGINNINGS:
      - "[Topic name] is..."
      - "The main thesis of the video is..."
      - "[Specific fact/number] shows..."
      - "According to the author..."

      LENGTH: about 500-800 words
      GOAL: Make the reader understand what the video was about without watching it.
    `;

    switch (style) {
      case 'bullet-points':
        return `${baseInstructions}
                ${language === 'pl' ? 'Przedstaw jako skr√≥cone punkty w pierwszej osobie. Ka≈ºdy punkt to skondensowana wersja moich my≈õli - oko≈Ço 50% kr√≥cej ale z zachowaniem wszystkich wa≈ºnych informacji.' : 'Present as condensed bullet points in first person. Each point is a condensed version of my thoughts - about 50% shorter but keeping all important information.'}`;
      
      case 'paragraph':
        return `${baseInstructions}
                ${language === 'pl' ? 'Napisz skr√≥cone podsumowanie w formie p≈Çynnych paragraf√≥w w pierwszej osobie. Ka≈ºda sekcja to skondensowana wersja moich oryginalnych przemy≈õle≈Ñ - oko≈Ço 50% kr√≥cej.' : 'Write a condensed summary in flowing paragraphs in first person. Each section is a condensed version of my original thoughts - about 50% shorter.'}`;
      
      case 'key-insights':
        return `${baseInstructions}
                ${language === 'pl' ? 'Przedstaw najwa≈ºniejsze wnioski jako skr√≥cone refleksje w pierwszej osobie. Ka≈ºde spostrze≈ºenie to skondensowana wersja mojego my≈õlenia - oko≈Ço 50% kr√≥cej ale z kluczowymi przyk≈Çadami.' : 'Present key insights as condensed reflections in first person. Each insight is a condensed version of my thinking - about 50% shorter but with key examples.'}`;
      
      default:
        return `${baseInstructions} ${language === 'pl' ? 'Podsumuj tre≈õƒá jako skr√≥conƒÖ wersjƒô w pierwszej osobie - oko≈Ço 50% kr√≥cej, zachowujƒÖc wszystkie istotne informacje.' : 'Summarize the content as a condensed version in first person - about 50% shorter, preserving all essential information.'}`;
    }
  }

  private getUserPrompt(transcript: string, options: SummarizationOptions): string {
    // Use much longer transcript for detailed summaries - up to 50k characters
    const truncatedTranscript = transcript.length > 50000 
      ? transcript.substring(0, 50000) + '...' 
      : transcript;

    const isPolish = options.language === 'pl';
    
    return isPolish ? 
      `Przeanalizuj poni≈ºszy transkrypt i napisz ZWIƒòZ≈ÅE ale KOMPLETNE podsumowanie w pierwszej osobie.
      
      KLUCZOWE WYMAGANIA ZWIƒòZ≈ÅO≈öCI:
      - D≈Çugo≈õƒá: MAKSYMALNIE ${options.maxLength} s≈Ç√≥w (to jest twardy limit!)
      - Styl: ${options.style}
      - Wybierz tylko 3-5 najwa≈ºniejszych temat√≥w z ca≈Çej wypowiedzi
      - Ka≈ºdy temat opisz w 2-3 zdaniach maksymalnie
      - Zachowaj konkretne przyk≈Çady i liczby, ale skr√≥ƒá je o 70%
      - Pomi≈Ñ wszystkie powt√≥rzenia, dygresje i wype≈Çniacze
      - Skup siƒô na praktycznych wnioskach i actionable insights
      - Pierwsza osoba - jakby to by≈Çy Twoje my≈õli: "my≈õlƒô", "uwa≈ºam", "w mojej praktyce"
      - Maksymalna gƒôsto≈õƒá informacji - ka≈ºde s≈Çowo musi byƒá warto≈õciowe
      
      PRZYK≈ÅAD TRANSFORMACJI:
      Zamiast: "Chcia≈Çbym powiedzieƒá, ≈ºe moim zdaniem, w kontek≈õcie tego co m√≥wi≈Çem wcze≈õniej..."
      Pisz: "Uwa≈ºam, ≈ºe..."
      
      Transkrypt do przetworzenia:
      ${truncatedTranscript}` :
      `Analyze the following transcript and write a CONCISE but COMPLETE summary in first person.
      
      KEY CONCISENESS REQUIREMENTS:
      - Length: MAXIMUM ${options.maxLength} words (this is a hard limit!)
      - Style: ${options.style}
      - Choose only 3-5 most important topics from the entire speech
      - Describe each topic in 2-3 sentences maximum
      - Keep concrete examples and numbers, but shorten them by 70%
      - Skip all repetitions, digressions and fillers
      - Focus on practical conclusions and actionable insights
      - First person - as if these were your thoughts: "I think", "I believe", "in my practice"
      - Maximum information density - every word must be valuable
      
      TRANSFORMATION EXAMPLE:
      Instead of: "I would like to say that in my opinion, in the context of what I mentioned earlier..."
      Write: "I believe that..."
      
      Transcript to process:
      ${truncatedTranscript}`;
  }
}

export const getAIService = () => {
  const apiKey = process.env.OPENAI_API_KEY;
  if (!apiKey) {
    throw new Error('OpenAI API key not configured');
  }
  return new AIService(apiKey);
};