// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                 String   @id @default(cuid())
  clerkId            String?  @unique  // Made optional for migration
  googleId           String?  @unique  // New Google OAuth ID
  email              String   @unique
  name               String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  
  // Usage tracking for payment system
  minutesUsed        Int      @default(0)      // Total minutes of analyzed videos
  minutesPurchased   Int      @default(999999) // Unlimited minutes (completely free app)
  subscriptionStatus String   @default("FREE") // FREE or PAID
  lastPurchaseAt     DateTime?                 // Last time user bought minutes
  
  searches    Search[]
  favorites   Favorite[]
  videos      Video[]     // User's library videos
  payments    Payment[]   // User's payment history
  usageLogs   UsageLog[]  // Detailed usage tracking
  youtubeAuth YouTubeAuth? // YouTube OAuth2 authorization
  
  @@map("users")
}

model Search {
  id          String   @id @default(cuid())
  query       String
  userId      String
  results     Json     // Stores search results
  createdAt   DateTime @default(now())
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("searches")
}

model Video {
  id           String   @id @default(cuid())
  youtubeId    String   @unique
  userId       String?  // Optional - for library videos
  title        String
  channelName  String
  duration     String?
  viewCount    String?
  publishedAt  DateTime?
  description  String?  @db.Text
  thumbnail    String
  transcript   String?  @db.Text // Raw transcript
  summary      String?  @db.Text // AI-processed summary (contains both concise and detailed in JSON format)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  user         User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  favorites    Favorite[]
  
  @@map("videos")
}

model Favorite {
  id        String   @id @default(cuid())
  userId    String
  videoId   String
  createdAt DateTime @default(now())
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  video     Video    @relation(fields: [videoId], references: [id], onDelete: Cascade)
  
  @@unique([userId, videoId])
  @@map("favorites")
}

model Payment {
  id               String   @id @default(cuid())
  userId           String
  stripeSessionId  String   @unique  // Stripe checkout session ID
  stripePaymentId  String?           // Stripe payment intent ID (after successful payment)
  amount           Int               // Amount in grosze (2500 = 25.00 PLN)
  currency         String   @default("pln")
  status           String            // pending, completed, failed, cancelled
  minutesPurchased Int               // How many minutes were purchased (999999 = unlimited)
  createdAt        DateTime @default(now())
  completedAt      DateTime?         // When payment was completed
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("payments")
}

model UsageLog {
  id            String   @id @default(cuid())
  userId        String
  youtubeId     String
  videoTitle    String
  videoDuration String            // Original duration string (e.g., "1:23:45")
  minutesUsed   Int               // Duration converted to minutes
  createdAt     DateTime @default(now())
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("usage_logs")
}

model YouTubeAuth {
  id           String   @id @default(cuid())
  userId       String   @unique // One-to-one relationship with User
  accessToken  String   // OAuth2 access token
  refreshToken String?  // OAuth2 refresh token (optional)
  expiresAt    DateTime // When access token expires
  scope        String   // Granted scopes
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("youtube_auth")
}
